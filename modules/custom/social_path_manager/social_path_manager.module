<?php

/**
 * @file
 * The Social Path Manager module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupType;

/**
 * Implements hook_form_alter().
 */
function social_path_manager_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $social_group_types = _social_path_manager_group_types();

  $group_forms = [];

  foreach ($social_group_types as $social_group_type) {
    $group_forms['edit'][] = "group_{$social_group_type}_edit_form";
    $group_forms['add'][] = "group_{$social_group_type}_add_form";
  }

  if (in_array($form_id, $group_forms['add'], TRUE) || in_array($form_id, $group_forms['edit'], TRUE)) {
    $form['path']['#type'] = 'fieldset';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function social_path_manager_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'form_alter') {
    $group = $implementations['social_path_manager'];
    unset($implementations['social_path_manager']);
    $implementations['social_path_manager'] = $group;
  }
}

/**
 * Implements hook_entity_insert().
 */
function social_path_manager_entity_insert(EntityInterface $entity) {
  _social_path_manager_update_alias($entity, 'create');
}

/**
 * Implements hook_entity_update().
 */
function social_path_manager_entity_update(EntityInterface $entity) {
  _social_path_manager_update_alias($entity, 'update');
}

/**
 * Implements hook_entity_delete().
 */
function social_path_manager_entity_delete(EntityInterface $entity) {
  _social_path_manager_update_alias($entity, 'delete');
}

/**
 * Implements hook_batch_alter().
 */
function social_path_manager_batch_alter(&$batch) {
  if (!isset($batch['source_url'])) {
    return;
  }

  /** @var \Drupal\Core\Url $url */
  $url = &$batch['source_url'];

  // Bulk generate aliases include group tabs.
  if ($url->getRouteName() === 'pathauto.bulk.update.form') {
    $options = $batch['form_state']->getValue('update');
    $action = $batch['form_state']->getValue('action');

    // Check if the operation contains a group update.
    if ($options['canonical_entities:group'] === 'canonical_entities:group') {
      // Set additional batch to create group aliases for group tabs.
      $batch['operations'][] = [
        '_social_path_manager_update_group_tab_aliases',
        ['canonical_entities:group', $action],
      ];
      batch_set($batch);
    }
  }
}

/**
 * Common batch processing callback for all operations.
 */
function _social_path_manager_update_group_tab_aliases($id, $action, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['grouptab_aliases_created'] = 0;
    $group_ids = \Drupal::entityQuery('group')
      ->execute();
    $context['sandbox']['gips'] = array_keys($group_ids);
    $context['sandbox']['group_count'] = count($group_ids);
  }

  // Try to do 5 each cycle. Never do more than are available.
  for ($target = $context['sandbox']['progress'] + 5; $context['sandbox']['progress'] < $target && $context['sandbox']['progress'] < $context['sandbox']['group_count']; $context['sandbox']['progress']++) {
    $gip = $context['sandbox']['gips'][$context['sandbox']['progress']];
    $group = Group::load($gip);
    _social_path_manager_update_alias($group, $action, TRUE);
    $context['sandbox']['grouptab_aliases_created']++;
  }

  $context['sandbox']['#finished'] = empty($context['sandbox']['group_count']) ? 1 : ($context['sandbox']['progress'] / $context['sandbox']['group_count']);

  if ($context['sandbox']['#finished'] === 1) {
    \Drupal::service('messenger')->addMessage(\Drupal::translation()
      ->formatPlural($context['sandbox']['grouptab_aliases_created'], 'Generated 1 group tab aliases.', 'Generated @count group tab aliases.'));
  }
}

/**
 * Get a full list of group types.
 *
 * @return array
 *   List of group types.
 */
function _social_path_manager_group_types() {
  $types = &drupal_static(__FUNCTION__);
  if (!isset($types)) {
    $types = [];
    /** @var \Drupal\group\Entity\GroupType $group_type */
    foreach (GroupType::loadMultiple() as $group_type) {
      $types[] = $group_type->id();
    }
  }

  // Allow other modules to change the group types.
  \Drupal::moduleHandler()->alter('social_path_manager_group_types', $types);

  return $types;
}

/**
 * Get a list of tabs used in groups.
 *
 * @return array
 *   Array of group tabs.
 */
function _social_path_manager_group_tabs() {
  $tabs = &drupal_static(__FUNCTION__);
  if (!isset($tabs)) {
    /** @var \Drupal\Core\Menu\LocalTaskManager $taskManager */
    $taskManager = Drupal::service('plugin.manager.menu.local_task');
    $tabs = [];

    $group_tabs = $taskManager->getLocalTasksForRoute('entity.group.canonical');
    $group_tabs = $group_tabs[0];

    // Loop over the available tabs on a group.
    foreach ($group_tabs as $key => $localtask) {
      /** @var \Drupal\Core\Url $localtask */
      $tabs[$key] = $localtask->getRouteName();
    }
    // Allow other modules to change the group tabs.
    \Drupal::moduleHandler()->alter('social_path_manager_group_tabs', $tabs);
  }
  return $tabs;
}

/**
 * Implements hook_social_path_manager_group_tabs_alter().
 */
function social_path_manager_social_path_manager_group_tabs_alter(array &$tabs) {
  foreach ($tabs as $key => $route) {
    // Only allow tabs that are part of the group.
    if ($key === 'social_group.stream' || strpos($key, 'social_group') === FALSE) {
      unset($tabs[$key]);
    }
  }
}

/**
 * Get the url suffix for a giving route of a group.
 *
 * @param int $group_id
 *   The ID of the group being updated.
 * @param string $route
 *   The route of the tab being updated.
 *
 * @return string
 *   The url suffix of the tab.
 */
function _social_path_manager_get_path_suffix($group_id, $route) {
  $url = Url::fromRoute($route, ['group' => $group_id]);

  // Get the last part of the url.
  $url = explode('/', $url->getInternalPath());

  return end($url);
}

/**
 * Create the aliases for the views of the group.
 *
 * @param \Drupal\Core\Entity\EntityInterface|object $entity
 *   The entity that is the parent for the alias.
 * @param string $op
 *   The operation that is being performed.
 * @param bool $bulk
 *   Parameter to tell if the operation is coming from a bulk or not.
 */
function _social_path_manager_update_alias(EntityInterface $entity, $op, $bulk = FALSE) {
  if ($entity->getEntityTypeId() === 'group') {
    switch ($op) {
      case 'all':
      case 'update':
      case 'create':
        // If it's a bulk generate then get the alias by path.
        if ($bulk === TRUE) {
          $path['alias'] = \Drupal::service('path.alias_manager')->getAliasByPath('/group/' . $entity->id() . '/stream');
        }
        else {
          // New alias.
          $path = \Drupal::service('pathauto.generator')
            ->updateEntityAlias($entity, 'update');
        }

        // Check if the alias changed.
        // If yes, then change all the other views.
        if (!empty($path)) {
          foreach (_social_path_manager_group_tabs() as $route) {
            $suffix = _social_path_manager_get_path_suffix($entity->id(), $route);

            // Get alias of the group tab.
            $grouptab_alias = \Drupal::service('path.alias_manager')->getAliasByPath('/group/' . $entity->id() . '/' . $suffix);

            // Check of the alias is an alias or path.
            $is_alias = \Drupal::service('path.alias_storage')->aliasExists($grouptab_alias, 'und');

            // Create a new alias when it does not exist.
            if ($op === 'create' && $is_alias === FALSE) {
              // Insert the alias for the other views.
              \Drupal::service('path.alias_storage')
                ->save('/group/' . $entity->id() . '/' . $suffix, $path['alias'] . '/' . $suffix, 'und');
            }

            // Update alias by deleting the old one and creating a new one.
            if ($op === 'update' || $op === 'all') {
              \Drupal::service('pathauto.alias_storage_helper')
                ->deleteBySourcePrefix('/group/' . $entity->id() . '/' . $suffix);

              \Drupal::service('path.alias_storage')
                ->save('/group/' . $entity->id() . '/' . $suffix, $path['alias'] . '/' . $suffix, 'und');
            }
          }
          /** @var \Drupal\Core\Cache\CacheTagsInvalidator $cti */
          $cti = \Drupal::service('cache_tags.invalidator');
          $cti->invalidateTags(['group:' . $entity->id()]);
        }
        break;

      case 'delete':
        // Delete all the group tabs aliases if the group gets deleted.
        foreach (_social_path_manager_group_tabs() as $route) {
          $suffix = _social_path_manager_get_path_suffix($entity->id(), $route);

          \Drupal::service('pathauto.alias_storage_helper')
            ->deleteBySourcePrefix('/group/' . $entity->id() . '/' . $suffix);
        }
        break;
    }
  }
}
